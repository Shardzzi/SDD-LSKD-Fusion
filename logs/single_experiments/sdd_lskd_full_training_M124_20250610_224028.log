<class 'str'>
[36m[INFO] CONFIG:
DATASET:
  NUM_WORKERS: 2
  TEST:
    BATCH_SIZE: 64
  TYPE: cifar100
DISTILLER:
  STUDENT: resnet8x4_sdd
  TEACHER: resnet32x4_sdd
  TYPE: SDD_LSKD
EXPERIMENT:
  NAME: ''
  PROJECT: cifar100_baselines
  TAG: sdd_lskd,res32x4_sdd,res8x4_sdd
LOG:
  PREFIX: ./output
  SAVE_CHECKPOINT_FREQ: 40
  TENSORBOARD_FREQ: 500
  WANDB: false
SOLVER:
  BATCH_SIZE: 64
  EPOCHS: 240
  LR: 0.05
  LR_DECAY_RATE: 0.1
  LR_DECAY_STAGES:
  - 150
  - 180
  - 210
  MOMENTUM: 0.9
  TRAINER: base
  TYPE: SGD
  WEIGHT_DECAY: 0.0005
[0m
Files already downloaded and verified
Files already downloaded and verified
[36m[INFO] Loading teacher model[0m
[1,2,4]
[1,2,4]
[36m[INFO] Extra parameters of SDD_LSKD: 0[0m[0m
Epoch 1: Training...
/root/repos/SDD-LSKD-Fusion/mdistiller/engine/utils.py:107: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location="cpu")
/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py:92: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  global_prediction_true_mask_repeat = torch.tensor(global_prediction_true_mask).repeat(out_t_multi.shape[2])
/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py:93: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  global_prediction_false_mask_repeat = torch.tensor(global_prediction_false_mask).repeat(out_t_multi.shape[2])
Traceback (most recent call last):
  File "train_origin.py", line 211, in <module>
    main(cfg, args.resume, args.opts)
  File "train_origin.py", line 187, in main
    trainer.train(resume=resume)
  File "/root/repos/SDD-LSKD-Fusion/mdistiller/engine/trainer.py", line 92, in train
    self.train_epoch(epoch)
  File "/root/repos/SDD-LSKD-Fusion/mdistiller/engine/trainer.py", line 119, in train_epoch
    msg,loss_dict = self.train_iter(data, epoch, train_meters)
  File "/root/repos/SDD-LSKD-Fusion/mdistiller/engine/trainer.py", line 191, in train_iter
    preds, losses_dict = self.distiller(image=image, target=target, epoch=epoch)
  File "/root/miniconda3/envs/sdd-lskd-fusion/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/sdd-lskd-fusion/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/miniconda3/envs/sdd-lskd-fusion/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 184, in forward
    return self.module(*inputs[0], **module_kwargs[0])
  File "/root/miniconda3/envs/sdd-lskd-fusion/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/sdd-lskd-fusion/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/_base.py", line 39, in forward
    return self.forward_train(**kwargs)
  File "/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py", line 204, in forward_train
    loss_kd = min(kwargs["epoch"] / self.warmup, 1.0) * multi_scale_distillation_with_lskd(
  File "/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py", line 121, in multi_scale_distillation_with_lskd
    index[gw_lw] = 1.0  # Global wrong, local wrong - consistent
IndexError: too many indices for tensor of dimension 0
