<class 'str'>
[36m[INFO] CONFIG:
DATASET:
  NUM_WORKERS: 2
  TEST:
    BATCH_SIZE: 64
  TYPE: cifar100
DISTILLER:
  STUDENT: resnet8x4_sdd
  TEACHER: resnet32x4_sdd
  TYPE: SDD_LSKD
EXPERIMENT:
  NAME: ''
  PROJECT: cifar100_baselines
  TAG: sdd_lskd_quick,res32x4,res8x4
LOG:
  PREFIX: ./output
  SAVE_CHECKPOINT_FREQ: 40
  TENSORBOARD_FREQ: 500
  WANDB: false
SOLVER:
  BATCH_SIZE: 64
  EPOCHS: 5
  LR: 0.05
  LR_DECAY_RATE: 0.1
  LR_DECAY_STAGES:
  - 3
  - 4
  MOMENTUM: 0.9
  TRAINER: base
  TYPE: SGD
  WEIGHT_DECAY: 0.0005
[0m
Files already downloaded and verified
Files already downloaded and verified
[36m[INFO] Loading teacher model[0m
[1,2]
[1,2]
[36m[INFO] Extra parameters of SDD_LSKD: 0[0m[0m
Epoch 1: Training...
/root/repos/SDD-LSKD-Fusion/mdistiller/engine/utils.py:107: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location="cpu")
/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py:130: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  global_prediction_true_mask_repeat = torch.tensor(global_prediction_true_mask).repeat(out_t_multi.shape[2])
/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py:131: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  global_prediction_false_mask_repeat = torch.tensor(global_prediction_false_mask).repeat(out_t_multi.shape[2])
  Batch 100/782 - Loss CE: 4.3608, Loss KD: 0.1245
  Batch 200/782 - Loss CE: 4.1873, Loss KD: 0.1177
  Batch 300/782 - Loss CE: 4.0908, Loss KD: 0.1144
  Batch 400/782 - Loss CE: 4.0187, Loss KD: 0.1122
  Batch 500/782 - Loss CE: 3.9605, Loss KD: 0.1105
  Batch 600/782 - Loss CE: 3.9038, Loss KD: 0.1091
  Batch 700/782 - Loss CE: 3.8497, Loss KD: 0.1078
  Batch 782/782 - Loss CE: 3.8112, Loss KD: 0.1070
Epoch 1 Training Complete - Avg Loss CE: 3.8112, Avg Loss KD: 0.1070

Epoch 1 Results - Train Acc: 11.11% | Test Acc: 15.44% | Best: 15.44%
0.005773228333333334
Epoch 2: Training...

  Batch 100/782 - Loss CE: 3.3563, Loss KD: 0.1932
  Batch 200/782 - Loss CE: 3.3074, Loss KD: 0.1915
  Batch 300/782 - Loss CE: 3.2773, Loss KD: 0.1900
  Batch 400/782 - Loss CE: 3.2402, Loss KD: 0.1884
  Batch 500/782 - Loss CE: 3.1978, Loss KD: 0.1870
  Batch 600/782 - Loss CE: 3.1604, Loss KD: 0.1855
  Batch 700/782 - Loss CE: 3.1231, Loss KD: 0.1842
  Batch 782/782 - Loss CE: 3.0950, Loss KD: 0.1833
Epoch 2 Training Complete - Avg Loss CE: 3.0950, Avg Loss KD: 0.1833

Epoch 2 Results - Train Acc: 22.79% | Test Acc: 24.43% | Best: 24.43%
0.0056044994444444446
Epoch 3: Training...

  Batch 100/782 - Loss CE: 2.7372, Loss KD: 0.2581
  Batch 200/782 - Loss CE: 2.7500, Loss KD: 0.2578
  Batch 300/782 - Loss CE: 2.7339, Loss KD: 0.2560
  Batch 400/782 - Loss CE: 2.7079, Loss KD: 0.2542
  Batch 500/782 - Loss CE: 2.6849, Loss KD: 0.2530
  Batch 600/782 - Loss CE: 2.6691, Loss KD: 0.2518
  Batch 700/782 - Loss CE: 2.6401, Loss KD: 0.2503
  Batch 782/782 - Loss CE: 2.6178, Loss KD: 0.2494
Epoch 3 Training Complete - Avg Loss CE: 2.6178, Avg Loss KD: 0.2494

Epoch 3 Results - Train Acc: 32.24% | Test Acc: 31.12% | Best: 31.12%
0.005645065555555556
Epoch 4: Training...

  Batch 100/782 - Loss CE: 2.1866, Loss KD: 0.2305
  Batch 200/782 - Loss CE: 2.1566, Loss KD: 0.2291
  Batch 300/782 - Loss CE: 2.1429, Loss KD: 0.2284
  Batch 400/782 - Loss CE: 2.1357, Loss KD: 0.2278
  Batch 500/782 - Loss CE: 2.1220, Loss KD: 0.2272
  Batch 600/782 - Loss CE: 2.1065, Loss KD: 0.2265
  Batch 700/782 - Loss CE: 2.0954, Loss KD: 0.2260
  Batch 782/782 - Loss CE: 2.0892, Loss KD: 0.2256
Epoch 4 Training Complete - Avg Loss CE: 2.0892, Avg Loss KD: 0.2256

Epoch 4 Results - Train Acc: 44.50% | Test Acc: 45.47% | Best: 45.47%
0.005845201944444444
Epoch 5: Training...

  Batch 100/782 - Loss CE: 2.0110, Loss KD: 0.2218
  Batch 200/782 - Loss CE: 1.9914, Loss KD: 0.2213
  Batch 300/782 - Loss CE: 1.9888, Loss KD: 0.2212
  Batch 400/782 - Loss CE: 1.9822, Loss KD: 0.2212
  Batch 500/782 - Loss CE: 1.9760, Loss KD: 0.2211
  Batch 600/782 - Loss CE: 1.9704, Loss KD: 0.2209
  Batch 700/782 - Loss CE: 1.9705, Loss KD: 0.2207
  Batch 782/782 - Loss CE: 1.9691, Loss KD: 0.2206
Epoch 5 Training Complete - Avg Loss CE: 1.9691, Avg Loss KD: 0.2206

64
Epoch 5 Results - Train Acc: 47.28% | Test Acc: 47.44% | Best: 47.44%
0.0058017875
[31m[EVAL] Best accuracy:47.439998626708984[0m
