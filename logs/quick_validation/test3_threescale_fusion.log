<class 'str'>
[36m[INFO] CONFIG:
DATASET:
  NUM_WORKERS: 2
  TEST:
    BATCH_SIZE: 64
  TYPE: cifar100
DISTILLER:
  STUDENT: resnet8x4_sdd
  TEACHER: resnet32x4_sdd
  TYPE: SDD_LSKD
EXPERIMENT:
  NAME: ''
  PROJECT: cifar100_baselines
  TAG: sdd_lskd_quick,res32x4,res8x4
LOG:
  PREFIX: ./output
  SAVE_CHECKPOINT_FREQ: 40
  TENSORBOARD_FREQ: 500
  WANDB: false
SOLVER:
  BATCH_SIZE: 64
  EPOCHS: 5
  LR: 0.05
  LR_DECAY_RATE: 0.1
  LR_DECAY_STAGES:
  - 3
  - 4
  MOMENTUM: 0.9
  TRAINER: base
  TYPE: SGD
  WEIGHT_DECAY: 0.0005
[0m
Files already downloaded and verified
Files already downloaded and verified
[36m[INFO] Loading teacher model[0m
[1,2,4]
[1,2,4]
[36m[INFO] Extra parameters of SDD_LSKD: 0[0m[0m
Epoch 1: Training...
/root/repos/SDD-LSKD-Fusion/mdistiller/engine/utils.py:107: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location="cpu")
/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py:130: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  global_prediction_true_mask_repeat = torch.tensor(global_prediction_true_mask).repeat(out_t_multi.shape[2])
/root/repos/SDD-LSKD-Fusion/mdistiller/distillers/SDD_LSKD.py:131: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  global_prediction_false_mask_repeat = torch.tensor(global_prediction_false_mask).repeat(out_t_multi.shape[2])
  Batch 100/782 - Loss CE: 4.3729, Loss KD: 0.1510
  Batch 200/782 - Loss CE: 4.2187, Loss KD: 0.1435
  Batch 300/782 - Loss CE: 4.1127, Loss KD: 0.1397
  Batch 400/782 - Loss CE: 4.0293, Loss KD: 0.1372
  Batch 500/782 - Loss CE: 3.9737, Loss KD: 0.1355
  Batch 600/782 - Loss CE: 3.9178, Loss KD: 0.1340
  Batch 700/782 - Loss CE: 3.8693, Loss KD: 0.1327
  Batch 782/782 - Loss CE: 3.8309, Loss KD: 0.1319
Epoch 1 Training Complete - Avg Loss CE: 3.8309, Avg Loss KD: 0.1319

Epoch 1 Results - Train Acc: 11.01% | Test Acc: 14.97% | Best: 14.97%
0.004449224722222223
Epoch 2: Training...

  Batch 100/782 - Loss CE: 3.4156, Loss KD: 0.2436
  Batch 200/782 - Loss CE: 3.3672, Loss KD: 0.2414
  Batch 300/782 - Loss CE: 3.3298, Loss KD: 0.2398
  Batch 400/782 - Loss CE: 3.2923, Loss KD: 0.2383
  Batch 500/782 - Loss CE: 3.2581, Loss KD: 0.2365
  Batch 600/782 - Loss CE: 3.2194, Loss KD: 0.2348
  Batch 700/782 - Loss CE: 3.1828, Loss KD: 0.2332
  Batch 782/782 - Loss CE: 3.1584, Loss KD: 0.2322
Epoch 2 Training Complete - Avg Loss CE: 3.1584, Avg Loss KD: 0.2322

Epoch 2 Results - Train Acc: 21.89% | Test Acc: 23.69% | Best: 23.69%
0.004196217222222222
Epoch 3: Training...

  Batch 100/782 - Loss CE: 2.8912, Loss KD: 0.3307
  Batch 200/782 - Loss CE: 2.8488, Loss KD: 0.3270
  Batch 300/782 - Loss CE: 2.8019, Loss KD: 0.3240
  Batch 400/782 - Loss CE: 2.7677, Loss KD: 0.3218
  Batch 500/782 - Loss CE: 2.7351, Loss KD: 0.3197
  Batch 600/782 - Loss CE: 2.7166, Loss KD: 0.3182
  Batch 700/782 - Loss CE: 2.6899, Loss KD: 0.3165
  Batch 782/782 - Loss CE: 2.6689, Loss KD: 0.3150
Epoch 3 Training Complete - Avg Loss CE: 2.6689, Avg Loss KD: 0.3150

Epoch 3 Results - Train Acc: 31.13% | Test Acc: 28.56% | Best: 28.56%
0.005265484722222222
Epoch 4: Training...

  Batch 100/782 - Loss CE: 2.2718, Loss KD: 0.2946
  Batch 200/782 - Loss CE: 2.2241, Loss KD: 0.2911
  Batch 300/782 - Loss CE: 2.1913, Loss KD: 0.2888
  Batch 400/782 - Loss CE: 2.1767, Loss KD: 0.2878
  Batch 500/782 - Loss CE: 2.1593, Loss KD: 0.2870
  Batch 600/782 - Loss CE: 2.1466, Loss KD: 0.2861
  Batch 700/782 - Loss CE: 2.1379, Loss KD: 0.2855
  Batch 782/782 - Loss CE: 2.1276, Loss KD: 0.2848
Epoch 4 Training Complete - Avg Loss CE: 2.1276, Avg Loss KD: 0.2848

Epoch 4 Results - Train Acc: 43.50% | Test Acc: 45.48% | Best: 45.48%
0.005641084166666667
Epoch 5: Training...

  Batch 100/782 - Loss CE: 2.0185, Loss KD: 0.2790
  Batch 200/782 - Loss CE: 2.0123, Loss KD: 0.2792
  Batch 300/782 - Loss CE: 2.0011, Loss KD: 0.2784
  Batch 400/782 - Loss CE: 2.0013, Loss KD: 0.2783
  Batch 500/782 - Loss CE: 1.9964, Loss KD: 0.2780
  Batch 600/782 - Loss CE: 1.9977, Loss KD: 0.2780
  Batch 700/782 - Loss CE: 1.9972, Loss KD: 0.2780
  Batch 782/782 - Loss CE: 1.9966, Loss KD: 0.2781
Epoch 5 Training Complete - Avg Loss CE: 1.9966, Avg Loss KD: 0.2781

64
Epoch 5 Results - Train Acc: 46.69% | Test Acc: 47.20% | Best: 47.20%
0.005110189166666667
[31m[EVAL] Best accuracy:47.19999694824219[0m
